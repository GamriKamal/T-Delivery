services:
  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - t-delivery
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
    ports:
      - "8081:8081"
    networks:
      - t-delivery
    depends_on:
      - discovery-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  menu-service:
    build:
      context: ./menu-service
      dockerfile: Dockerfile
    container_name: menu-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
    ports:
      - "8082:8082"
    networks:
      - t-delivery
      - menu-service-t-delivery
    depends_on:
      - menu-service-mongodb
      - discovery-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
      - spring.datasource.url=jdbc:postgresql://user-service-postgresql_db:5432/user_db
    ports:
      - "8083:8083"
    networks:
      - t-delivery
      - user-service-t-delivery
    depends_on:
      - user-service-postgresql_db
      - discovery-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
      - spring.datasource.url=jdbc:postgresql://order-service-postgresql_db:5432/order_db
      - spring.kafka.bootstrap-servers=kafka:9092
    ports:
      - "8084:8084"
    networks:
      - t-delivery
      - order-service-t-delivery
    depends_on:
      - order-service-postgresql_db
      - kafka
      - discovery-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  courier-service:
    build:
      context: ./courier-service
      dockerfile: Dockerfile
    container_name: courier-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
      - spring.kafka.bootstrap-servers=kafka:9092
    ports:
      - "8086:8086"
    networks:
      - t-delivery
    depends_on:
      - discovery-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  route-service:
    build:
      context: ./route-service
      dockerfile: Dockerfile
    container_name: route-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
      - spring.datasource.url=jdbc:postgresql://route-service-postgresql_db:5432/routes_db
    ports:
      - "8087:8087"
    networks:
      - t-delivery
      - route-service-t-delivery
    depends_on:
      - route-service-postgresql_db
      - discovery-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  message-service:
    build:
      context: ./message-service
      dockerfile: Dockerfile
    container_name: message-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
      - spring.kafka.bootstrap-servers=kafka:9092
    ports:
      - "8085:8085"
    networks:
      - t-delivery
    depends_on:
      - order-service
      - courier-service
      - kafka
      - discovery-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
    ports:
      - "8000:8000"
    networks:
      - t-delivery
    depends_on:
      - auth-service
      - menu-service
      - user-service
      - order-service
      - message-service
      - route-service
      - courier-service
      - discovery-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service-postgresql_db:
    image: postgres:13
    container_name: user-service-postgresql_db
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=irmag
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=user_db
    volumes:
      - ./user-service/db-volume:/var/lib/postgresql/data
    networks:
      - user-service-t-delivery

  order-service-postgresql_db:
    image: postgis/postgis:14-3.3
    container_name: order-service-postgresql_db
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=irmag
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=order_db
    volumes:
      - ./order-service/db-volume:/var/lib/postgresql/data
    networks:
      - order-service-t-delivery

  route-service-postgresql_db:
    image: postgres:13
    container_name: route-service-postgresql_db
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=irmag
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=routes_db
    volumes:
      - ./route-service/db-volume:/var/lib/postgresql/data
    networks:
      - route-service-t-delivery

  menu-service-mongodb:
    image: mongo:latest
    container_name: menu-service-mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./menu-service/mongodb-storage:/data/db
    networks:
      - menu-service-t-delivery

  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.7.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - t-delivery

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - t-delivery

networks:
  t-delivery:
    driver: bridge
  user-service-t-delivery:
    driver: bridge
  menu-service-t-delivery:
    driver: bridge
  order-service-t-delivery:
    driver: bridge
  route-service-t-delivery:
    driver: bridge
